def truncate(n):
  multiplier = 10
  return int(n * multiplier) / multiplier

def getTotals(categories):
  total = 0
  breakdown = []
  for category in categories:
    total += category.get_withdrawls()
    breakdown.append(category.get_withdrawls())
  rounded = list(map(lambda x: truncate(x/total), breakdown))
  return rounded

def create_spend_chart(categories):
    s="Percentage spent by category\n"
    sum=0
    withdraws={}
    for x in categories:
        withdraws[x.name]=0
        for y in x.ledger:
            if y['amount']<0:
                withdraws[x.name]+=y['amount']
        withdraws[x.name]=-withdraws[x.name]
    for x in withdraws:
        sum+=withdraws[x]
    for x in withdraws:
        withdraws[x]=int(withdraws[x]/sum*100)
        
    for i in range(100,-10,-10):
        s+=str(i).rjust(3)+'| '
        for x in categories:
            if withdraws[x.name]>=i:
                s+='o  '
            else:
                s+='   '
        s+='\n'
    s+=' '*4+'-'*(1+len(categories)*3)+'\n'

    max_len=0
    for x in categories:
        if len(x.name)>max_len:
            max_len=len(x.name)
    for i in range(max_len):
        s+=' '*5
        for x in categories:
            if len(x.name)>i:
                s+=x.name[i]+'  '
            else:
                s+=' '*3
        s+='\n'
    return s[0:-1]
  
class Category:

  def __init__(self, name):
    self.name = name
    self.ledger = list()

  def __str__(self):
    title = f'{self.name:*^30}\n'
    items = ''
    total = 0
    for item in self.ledger:
      items += f"{item['description'][0:23]:23}" + f"{item['amount']:>7.2f}" + '\n'

      total += item['amount']

    output = title + items + 'Total: ' + str(total)
    return output
    
  def deposit(self, amount, description=''):
    self.ledger.append({"amount":amount , "description":description})
  
  def withdraw(self, amount, description=''):
    if (self.check_funds(amount)):
      self.ledger.append({'amount': -amount, 'description': description})
      return True
    else:
      return False
      
  def get_balance(self):
    total_balance = 0
    for item in self.ledger:
      total_balance += item['amount']

    return total_balance

  def transfer(self, amount, category):
    if(self.check_funds(amount)):
      self.withdraw(amount, 'Transfer to ' + category.name)
      category.deposit(amount, 'Transfer from ' + self.name)
      return True
    return False

  def check_funds(self, amount):
    if(self.get_balance() >= amount):
      return True
    return False

  def get_withdrawls(self):
    total = 0
    for item in self.ledger:
      if item['amount'] < 0:
        total += item['amount']
    return total
